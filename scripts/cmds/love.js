const axios = require('axios');
const fs = require('fs');
const path = require('path');

module.exports = {
  config: {
    name: "love",
    version: "2.1",
    author: "OpenSource Edition",
    description: {
      en: "‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶™‡ßÅ‡¶®, ‡¶õ‡¶¨‡¶ø ‡¶∏‡¶π‡•§"
    },
    category: "fun",
    guide: {
      en: "{pn} @User1 @User2 ‡¶Ö‡¶•‡¶¨‡¶æ {pn} ‡¶®‡¶æ‡¶Æ1 ‡¶®‡¶æ‡¶Æ2"
    }
  },

  onStart: async function ({ message, args, event, usersData }) {
    let [uid1, uid2] = Object.keys(event.mentions);
    let name1, name2;

    if (uid1 && uid2) {
      name1 = await usersData.getName(uid1);
      name2 = await usersData.getName(uid2);
    } else if (args.length >= 2) {
      name1 = args[0];
      name2 = args[1];
    } else {
      return message.reply("‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßÅ‡¶á‡¶ú‡¶®‡¶ï‡ßá ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ‡¶∞ ‡¶π‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø!");
    }

    const lovePercent = Math.floor(Math.random() * 101);
    const loveBar = "‚ñà".repeat(Math.floor(lovePercent / 10)) + "‚ñë".repeat(10 - Math.floor(lovePercent / 10));

    let comment = "";
    if (lovePercent >= 95) comment = "‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá ‡¶Ü‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶æ ‡¶ù‡¶∞‡ßá ‡¶™‡ßú‡ßá!";
    else if (lovePercent >= 80) comment = "‡¶ö‡ßã‡¶ñ‡ßá ‡¶ö‡ßã‡¶ñ ‡¶∞‡¶æ‡¶ñ‡¶≤‡ßá‡¶á ‡¶™‡ßç‡¶∞‡ßá‡¶Æ ‡¶¨‡ßÅ‡¶ù‡¶æ ‡¶Ø‡¶æ‡ßü!";
    else if (lovePercent >= 60) comment = "‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶ó‡ßú‡¶õ‡ßá ‡¶ß‡ßÄ‡¶∞‡ßá ‡¶ß‡ßÄ‡¶∞‡ßá, ‡¶∏‡¶æ‡¶¨‡¶ß‡¶æ‡¶®‡ßá ‡¶Ü‡¶ó‡¶æ‡¶ì!";
    else if (lovePercent >= 40) comment = "‡¶Ü‡¶≤‡ßã-‡¶Ö‡¶®‡ßç‡¶ß‡¶ï‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶Æ‡¶æ‡¶ù‡¶ø, ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶ö‡¶≤‡¶§‡ßá ‡¶π‡¶¨‡ßá!";
    else comment = "‡¶π‡ßÉ‡¶¶‡ßü‡ßá‡¶∞ ‡¶ü‡¶æ‡¶® ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¨‡¶≤, ‡¶§‡¶¨‡ßá ‡¶Ö‡¶≤‡ßå‡¶ï‡¶ø‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ò‡¶ü‡¶§‡ßá‡¶ì ‡¶™‡¶æ‡¶∞‡ßá!";

    const result = `
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
     üíñ LOVE METER üíñ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

üíû ${name1} + ${name2}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ù§Ô∏è ‡¶Æ‡¶ø‡¶≤: ${lovePercent}%
[ ${loveBar} ]
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí¨ ${comment}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`;

    const token = "6628568379|c1e620fa708a1d5696fb991c1bde5662";

    if (uid1 && uid2) {
      try {
        const [img1, img2] = await Promise.all([
          axios.get(`https://graph.facebook.com/${uid1}/picture?width=720&height=720&access_token=${token}`, { responseType: 'arraybuffer' }),
          axios.get(`https://graph.facebook.com/${uid2}/picture?width=720&height=720&access_token=${token}`, { responseType: 'arraybuffer' })
        ]);

        const imgPath1 = path.join(__dirname, 'love_user1.jpg');
        const imgPath2 = path.join(__dirname, 'love_user2.jpg');

        fs.writeFileSync(imgPath1, Buffer.from(img1.data));
        fs.writeFileSync(imgPath2, Buffer.from(img2.data));

        message.reply({
          body: result.trim(),
          attachment: [
            fs.createReadStream(imgPath1),
            fs.createReadStream(imgPath2)
          ]
        }, () => {
          fs.unlinkSync(imgPath1);
          fs.unlinkSync(imgPath2);
        });
      } catch (err) {
        console.error(err);
        return message.reply("‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶§‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ü‡¶æ‡¶® ‡¶†‡¶ø‡¶ï‡¶á ‡¶ú‡¶Æ‡ßá ‡¶Ü‡¶õ‡ßá!");
      }
    } else {
      message.reply(result.trim());
    }
  }
};
